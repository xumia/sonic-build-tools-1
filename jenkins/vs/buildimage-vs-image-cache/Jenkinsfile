pipeline {
    agent { node { label 'jenkins-build-cache' } }

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '30'))

    }

    stages {
        stage('Prepare') {
            steps {
                dir('sonic-buildimage') {
                    checkout([$class: 'GitSCM',
                          branches: [[name: 'refs/heads/master']],
                          extensions: [[$class: 'SubmoduleOption',
                                        disableSubmodules: false,
                                        parentCredentials: false,
                                        recursiveSubmodules: true,
                                        reference: '',
                                        trackingSubmodules: false]],
                          userRemoteConfigs: [[url: 'http://github.com/Azure/sonic-buildimage']]])
                }
            }
        }

        stage('Build') {
            steps {
                sh '''#!/bin/bash -xe

cd sonic-buildimage
git submodule foreach --recursive '[ -f .git ] && echo "gitdir: $(realpath --relative-to=. $(cut -d" " -f2 .git))" > .git'


CACHE_OPTIONS="SONIC_DPKG_CACHE_METHOD=cache SONIC_DPKG_CACHE_SOURCE=/nfs/dpkg_cache/vs"
make configure PLATFORM=vs

sudo bash -c "echo 1 > /proc/sys/vm/compact_memory"

make SONIC_CONFIG_BUILD_JOBS=1 $CACHE_OPTIONS INSTALL_DEBUG_TOOLS=y target/sonic-vs.bin
mv target/sonic-vs.bin target/sonic-vs-dbg.bin
mv target/sonic-vs.bin.log target/sonic-vs-dbg.bin.log
make SONIC_CONFIG_BUILD_JOBS=1 $CACHE_OPTIONS target/sonic-vs.bin

rm -rf ../target
mv target ../

# copy image to scratchpad
sudo cp ../target/sonic-vs.bin /nfs/jenkins/sonic-vs-${JOB_NAME##*/}.${BUILD_NUMBER}.bin
sudo cp ../target/sonic-vs-dbg.bin /nfs/jenkins/sonic-vs-dbg-${JOB_NAME##*/}.${BUILD_NUMBER}.bin

'''
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
                    withCredentials([sshUserPrivateKey(credentialsId: '2b6b6afe-4892-41d1-967c-d683e7773727', keyFileVariable: 'VM_USER_PRIVATE_KEY'), \
                            usernamePassword(credentialsId: 'sonicdev-cr', usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWD')]) {
                            sh './scripts/vs/buildimage-vs-image/build_kvm_image.sh'
                        }
                }
            }
        }

    }
    post {
        failure {
            archiveArtifacts(artifacts: 'target/**/*.log, target/*')
        }
        success {
            archiveArtifacts(artifacts: 'target/**')
        }
        cleanup {
            cleanWs(disableDeferredWipeout: false, deleteDirs: true, notFailBuild: true)
        }
    }
}
